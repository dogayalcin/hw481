/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package hw481;
import static spark.Spark.get;
import static spark.Spark.port;
import static spark.Spark.post;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import spark.ModelAndView;
import spark.template.mustache.MustacheTemplateEngine;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        
        System.out.println(new App().getGreeting());
        
        int port=Integer.parseInt(System.getenv("PORT"));
        port(port);

        get("/",(req,res) -> "WELCOME");

        get("/compute",
        (rq, rs) -> {
            Map<String,String> map=new HashMap<String,String>();
            map.put("result","not computed yet!");
            return new ModelAndView(map,"compute.mustache");
        },
        new MustacheTemplateEngine()
        );

        post("/compute", (req, res) -> {
            
  
            String input1 = req.queryParams("input1");
            java.util.Scanner sc1 = new java.util.Scanner(input1);
            sc1.useDelimiter("[;\r\n]+");
            java.util.ArrayList<Integer> inputList = new java.util.ArrayList<>();
            while (sc1.hasNext())
            {
              int value = Integer.parseInt(sc1.next().replaceAll("\\s",""));
              inputList.add(value);
            }
            sc1.close();
            System.out.println(inputList);
            int[] arr=new int[inputList.size()];
            for(int i=0;i<inputList.size();i++){
                arr[i]=inputList.get(i);
            }
  
            String input2 = req.queryParams("input2");
            java.util.Scanner sc2 = new java.util.Scanner(input2);
            sc2.useDelimiter("[;\r\n]+");
            java.util.ArrayList<Integer> inputList2 = new java.util.ArrayList<>();
            while (sc2.hasNext())
            {
                int value = Integer.parseInt(sc2.next().replaceAll("\\s",""));
                inputList2.add(value);
            }

            sc2.close();
            System.out.println(inputList2);
            int[] resultArr;
            if(inputList2.size()==2){
                String type=""+inputList2.get(0);
                Integer index=new Integer(inputList2.get(1));
                resultArr=App.modifyArray(arr,1,type,index);
            }
            else{
                int e=inputList2.get(0);
                String type=""+inputList2.get(1);
                Integer index=new Integer(inputList2.get(2));
                resultArr=App.modifyArray(arr,e,type,index);
            }
            
            String result="{ ";
            for(int i:resultArr){
                result=result+" "+i;
            }
            result=result+" }";
            Map<String, String> map = new HashMap<String, String>();
            map.put("result", result);
            return new ModelAndView(map, "compute.mustache");
          }, new MustacheTemplateEngine());
     
    }
    
    public static int[] modifyArray(int[] array,int e,String type,Integer index){
       
        if(array==null || index<0 || index>(array.length+1) ){
            throw new IllegalArgumentException();
       }

       if(type.equals("1")){ //eleman ekleme
               
               int[] newArr=new int[array.length+1];
            int j=0;
            for(int i=0;i<array.length+1;i++){
                
                if(index.compareTo(i)==0){
                    newArr[index.intValue()]=e;
                }
                else{
                    newArr[i]=array[j];
                    j++;
                }
            }
            return newArr;
       }
       else if(type.equals("2")){ //eleman cikarma
           
           int[] newArr=new int[array.length-1];
           int j=0;
           for(int i=0;i<array.length;i++) {
               
               if(index.compareTo(i)!=0) {
                   newArr[j]=array[i];
                   j++;
               }
           }
           
           return newArr;
       }

       else{
            throw new IllegalArgumentException();
       }


    }
}
